import json
import os
import pandas as pd

USERS_FILE = 'server_users_keys.json'

def load_data():
    return json.load(open(USERS_FILE)) if os.path.exists(USERS_FILE) else {}

def save_data(data):
    with open(USERS_FILE, 'w') as f:
        json.dump(data, f, indent=4)
    print(f"✅ Saved data to {USERS_FILE}")

def view_data():
    data = load_data()
    if not data:
        print("⚠️ No server/user data found.")
        return
    servers = input("Enter server names (comma-separated) or Enter for all: ").strip()
    users = input("Enter usernames (comma-separated) or Enter for all: ").strip()
    servers_filter = [s.strip() for s in servers.split(',')] if servers else None
    users_filter = [u.strip() for u in users.split(',')] if users else None

    for server, server_data in data.items():
        if servers_filter and server not in servers_filter:
            continue
        print(f"\n🔹 Server: {server}")
        for user, key in server_data.get('users', {}).items():
            if users_filter and user not in users_filter:
                continue
            print(f"    👤 {user} → 🗝️ {key}")

def manual_add_update():
    data = load_data()
    server = input("Enter server name: ").strip()
    user = input("Enter username: ").strip()
    key = input("Enter SSH key path: ").strip()
    if not all([server, user, key]):
        print("❌ Server, user, and key path are required.")
        return
    data.setdefault(server, {"users": {}})
    action = "Updated" if user in data[server]["users"] else "Added"
    data[server]["users"][user] = key
    save_data(data)
    print(f"{action} SSH key for {user}@{server}")

def manual_delete():
    data = load_data()
    server = input("Enter server name: ").strip()
    user = input("Enter username: ").strip()
    if not server or not user:
        print("❌ Both server and user must be specified.")
        return
    if server not in data or user not in data[server]["users"]:
        print("⚠️ No such entry.")
        return
    if input(f"Confirm delete {user}@{server}? (yes/no): ").strip().lower() == 'yes':
        del data[server]["users"][user]
        if not data[server]["users"]:
            del data[server]
        save_data(data)
        print(f"✅ Deleted {user}@{server}")
    else:
        print("❌ Cancelled.")

def bulk_upload():
    path = input("Enter CSV/XLSX path (columns: server,user,ssh_key_path): ").strip()
    if not os.path.exists(path):
        print("❌ File not found.")
        return
    try:
        df = pd.read_excel(path) if path.endswith('.xlsx') else pd.read_csv(path)
    except Exception as e:
        print(f"❌ Error: {e}")
        return

    if not {'server', 'user', 'ssh_key_path'}.issubset(df.columns):
        print("❌ Required columns: server,user,ssh_key_path")
        return

    data = load_data()
    added = updated = 0

    for _, row in df.iterrows():
        server = str(row['server']).strip()
        user = str(row['user']).strip()
        key = str(row['ssh_key_path']).strip()
        if not all([server, user, key]):
            print(f"⚠️ Skipping row: {row.to_dict()}")
            continue
        data.setdefault(server, {"users": {}})
        if user in data[server]["users"]:
            updated += 1
        else:
            added += 1
        data[server]["users"][user] = key

    save_data(data)
    print(f"✅ Bulk upload complete. Added: {added}, Updated: {updated}")

def bulk_remove():
    path = input("Enter CSV/XLSX path (columns: server,user): ").strip()
    if not os.path.exists(path):
        print("❌ File not found.")
        return
    try:
        df = pd.read_excel(path) if path.endswith('.xlsx') else pd.read_csv(path)
    except Exception as e:
        print(f"❌ Error: {e}")
        return
    if not {'server', 'user'}.issubset(df.columns):
        print("❌ Required columns: server,user")
        return

    data = load_data()
    removed = not_found = 0

    for _, row in df.iterrows():
        server = str(row['server']).strip()
        user = str(row['user']).strip()
        if server in data and user in data[server]["users"]:
            del data[server]["users"][user]
            removed += 1
            if not data[server]["users"]:
                del data[server]
        else:
            not_found += 1

    save_data(data)
    print(f"✅ Removed: {removed}, Not found: {not_found}")

def main():
    while True:
        print("\n== Server Users & SSH Keys Manager ==")
        print("1. View server/user keys")
        print("2. Add/Update user key")
        print("3. Delete user key")
        print("4. Bulk upload from file")
        print("5. Bulk remove from file")
        print("6. Quit")
        choice = input("Select option (1-6): ").strip()

        if choice == '1':
            view_data()
        elif choice == '2':
            manual_add_update()
        elif choice == '3':
            manual_delete()
        elif choice == '4':
            bulk_upload()
        elif choice == '5':
            bulk_remove()
        elif choice == '6':
            print("👋 Bye!")
            break
        else:
            print("❌ Invalid option.")

if __name__ == '__main__':
    main()
